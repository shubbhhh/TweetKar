// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  name          String?
  details       String?
  profilePic    String?
  password      String
  creationDate  DateTime     @default(now())
  posts         Post[]
  bookmarks     Bookmark[]
  Likes         Like[]
  comments      Comment[]
  subscribers   Subscriber[] @relation("UserSubscribers")
  subscribedTo  Subscriber[] @relation("UserSubscribedTo")
  notifications Notifications[]
}

model Post {
  id            String       @id @default(uuid())
  title         String
  content       String
  publishedDate DateTime     @default(now())
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  bookmarks     Bookmark[]
  Likes         Like[]
  comments      Comment[]
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}

model Subscriber {
  id           String   @id @default(uuid())
  userId       String
  subscriberId String
  creationDate DateTime @default(now())

  user       User @relation("UserSubscribers", fields: [userId], references: [id])
  subscriber User @relation("UserSubscribedTo", fields: [subscriberId], references: [id])
}

model Comment {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
  Likes     Like[]
}

model Notifications {
  id        String @id @default(uuid())
  body      String
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
}