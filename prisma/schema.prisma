generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  username      String
  password      String?
  creationDate  DateTime        @default(now())
  name          String?
  details       String?
  profilePic    String?
  bookmarks     Bookmark[]
  comments      Comment[]
  Likes         Like[]
  notifications Notifications[]
  posts         Post[]
  subscribedTo  Subscriber[]    @relation("UserSubscribedTo")
  subscribers   Subscriber[]    @relation("UserSubscribers")
}

model Post {
  id            String     @id @default(uuid())
  content       String
  publishedDate DateTime   @default(now())
  authorId      String
  bookmarks     Bookmark[]
  comments      Comment[]
  Likes         Like[]
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscriber {
  id           String   @id @default(uuid())
  userId       String
  subscriberId String
  creationDate DateTime @default(now())
  subscriber   User     @relation("UserSubscribedTo", fields: [subscriberId], references: [id])
  user         User     @relation("UserSubscribers", fields: [userId], references: [id])
}

model Comment {
  id        String    @id @default(uuid())
  userId    String
  postId    String
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  String?
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Likes     Like[]
}

model Notifications {
  id        String   @id @default(uuid())
  body      String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
